/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// DOM elements\r\nconst $hamburger    = document.getElementById('hamburger')\r\nconst $overlay      = document.getElementById('overlay')\r\nconst $mobileMenu   = document.getElementById('mobile')\r\nconst $statCounters = document.querySelectorAll('.stats__item-count')\r\n\r\nlet scrollFlag      = false\r\n\r\n// Event listeners\r\n$hamburger.addEventListener('click', toggleMobile) \r\n$overlay.addEventListener('click', toggleMobile)\r\ndocument.addEventListener('scroll', scrollPage)\r\n\r\n// Event handlers \r\nfunction toggleMobile() {\r\n  $hamburger.classList.toggle('open')\r\n  $overlay.classList.toggle('overlay-show')\r\n  $mobileMenu.classList.toggle('open')\r\n  document.body.classList.toggle('scrollLock')\r\n}\r\n\r\nfunction scrollPage() {\r\n  const scrollPos = window.scrollY\r\n\r\n  if (scrollPos > 60 && !scrollFlag) {\r\n    updateFalconStats()\r\n    scrollFlag = true\r\n  } else if (scrollPos < 60 && scrollFlag) {\r\n    resetFalcoStats()\r\n    scrollFlag = false\r\n  }\r\n\r\n  console.log(scrollPos, window.scrollY);\r\n  // for header\r\n  if (scrollPos > window.scrollY) {\r\n    console.log('up!');\r\n  }\r\n}\r\n\r\nfunction resetFalcoStats() {\r\n  $statCounters.forEach(counter => counter.innerText = '0')\r\n}\r\n\r\nfunction updateFalconStats() {\r\n  $statCounters.forEach(counter => {\r\n    counter.innerText = '0'\r\n\r\n    const updateCounter = () => {\r\n      // get count target\r\n      const target = +counter.getAttribute('data-target')\r\n\r\n      // get current target value\r\n      const c = +counter.innerText\r\n\r\n      // create an increment\r\n      const increment = target / 100\r\n\r\n      // if counter is < target, add increment\r\n      if (c < target) {\r\n        // round up and set the counter value \r\n        counter.innerText = `${Math.ceil(c + increment)}`\r\n\r\n        setTimeout(updateCounter, 55)\r\n      } else {\r\n        counter.innerText = target\r\n      }\r\n    }\r\n\r\n    updateCounter() \r\n  })\r\n}\n\n//# sourceURL=webpack://gulp-start-bundle-11.09.2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;